diff -ur libxml2-2.9.9-orig/python/libxml.py libxml2-2.9.9/python/libxml.py
--- libxml2-2.9.9-orig/python/libxml.py	2020-02-14 10:32:23.225655151 +0000
+++ libxml2-2.9.9/python/libxml.py	2020-02-14 10:57:26.419961633 +0000
@@ -309,6 +309,13 @@
         if ret == None:
             return None
         return nodeWrap(ret)
+    def add_next(self, elem):
+        if elem is None: elem__o = None
+        else: elem__o = elem._o
+        ret = libxml2mod.xmlAddNext(self._o, elem__o)
+        if ret is None:raise treeError('xmlAddNext() failed')
+        __tmp = xmlNode(_obj=ret)
+        return __tmp
     def get_properties(self):
         ret = libxml2mod.properties(self._o)
         if ret == None:
@@ -390,7 +397,7 @@
         parent = property(get_parent, None, None, "Parent node")
         children = property(get_children, None, None, "First child node")
         last = property(get_last, None, None, "Last sibling node")
-        next = property(get_next, None, None, "Next sibling node")
+        next = property(get_next, add_next, None, "Next sibling node")
         prev = property(get_prev, None, None, "Previous sibling node")
         properties = property(get_properties, None, None, "List of properies")
         content = property(get_content, None, None, "Content of this node")
diff -ur libxml2-2.9.9-orig/python/libxml2-export.c libxml2-2.9.9/python/libxml2-export.c
--- libxml2-2.9.9-orig/python/libxml2-export.c	2020-02-14 10:32:23.229650751 +0000
+++ libxml2-2.9.9/python/libxml2-export.c	2020-02-14 10:52:45.415701516 +0000
@@ -166,6 +166,7 @@
     { (char *)"xmlAddDtdEntity", libxml_xmlAddDtdEntity, METH_VARARGS, NULL },
     { (char *)"xmlAddEncodingAlias", libxml_xmlAddEncodingAlias, METH_VARARGS, NULL },
     { (char *)"xmlAddNextSibling", libxml_xmlAddNextSibling, METH_VARARGS, NULL },
+    { (char *)"xmlAddNext", libxml_xmlAddNext, METH_VARARGS, NULL },
 #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_HTML_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) || defined(LIBXML_XINCLUDE_ENABLED)
     { (char *)"xmlAddPrevSibling", libxml_xmlAddPrevSibling, METH_VARARGS, NULL },
 #endif /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_HTML_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) || defined(LIBXML_XINCLUDE_ENABLED) */
diff -ur libxml2-2.9.9-orig/python/libxml2-py.c libxml2-2.9.9/python/libxml2-py.c
--- libxml2-2.9.9-orig/python/libxml2-py.c	2020-02-14 10:32:23.252341665 +0000
+++ libxml2-2.9.9/python/libxml2-py.c	2020-02-14 10:52:00.131204493 +0000
@@ -1114,6 +1114,25 @@
 }
 
 PyObject *
+libxml_xmlAddNext(PyObject *self ATTRIBUTE_UNUSED, PyObject *args) {
+    PyObject *py_retval;
+    xmlNodePtr c_retval;
+    xmlNodePtr cur;
+    PyObject *pyobj_cur;
+    xmlNodePtr elem;
+    PyObject *pyobj_elem;
+
+    if (!PyArg_ParseTuple(args, (char *)"OO:xmlAddNext", &pyobj_cur, &pyobj_elem))
+        return(NULL);
+    cur = (xmlNodePtr) PyxmlNode_Get(pyobj_cur);
+    elem = (xmlNodePtr) PyxmlNode_Get(pyobj_elem);
+
+    c_retval = xmlAddNext(cur, elem);
+    py_retval = libxml_xmlNodePtrWrap((xmlNodePtr) c_retval);
+    return(py_retval);
+}
+
+PyObject *
 libxml_xmlAddNextSibling(PyObject *self ATTRIBUTE_UNUSED, PyObject *args) {
     PyObject *py_retval;
     xmlNodePtr c_retval;
diff -ur libxml2-2.9.9-orig/python/libxml2-py.h libxml2-2.9.9/python/libxml2-py.h
--- libxml2-2.9.9-orig/python/libxml2-py.h	2020-02-14 10:32:23.208918351 +0000
+++ libxml2-2.9.9/python/libxml2-py.h	2020-02-14 10:53:10.344238390 +0000
@@ -170,6 +170,7 @@
 PyObject * libxml_xmlAddPrevSibling(PyObject *self, PyObject *args);
 #endif /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_HTML_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) || defined(LIBXML_XINCLUDE_ENABLED) */
 PyObject * libxml_xmlAddSibling(PyObject *self, PyObject *args);
+PyObject * libxml_xmlAddNext(PyObject *self, PyObject *args);
 #if defined(LIBXML_DEBUG_ENABLED)
 PyObject * libxml_xmlBoolToText(PyObject *self, PyObject *args);
 #endif /* defined(LIBXML_DEBUG_ENABLED) */
diff -ur libxml2-2.9.9-orig/python/libxml2.py libxml2-2.9.9/python/libxml2.py
--- libxml2-2.9.9-orig/python/libxml2.py	2020-02-14 10:32:23.198706717 +0000
+++ libxml2-2.9.9/python/libxml2.py	2020-02-14 10:54:20.324107787 +0000
@@ -309,6 +309,13 @@
         if ret == None:
             return None
         return nodeWrap(ret)
+    def add_next(self, elem):
+        if elem is None: elem__o = None
+        else: elem__o = elem._o
+        ret = libxml2mod.xmlAddNext(self._o, elem__o)
+        if ret is None:raise treeError('xmlAddNext() failed')
+        __tmp = xmlNode(_obj=ret)
+        return __tmp
     def get_properties(self):
         ret = libxml2mod.properties(self._o)
         if ret == None:
@@ -390,7 +397,7 @@
         parent = property(get_parent, None, None, "Parent node")
         children = property(get_children, None, None, "First child node")
         last = property(get_last, None, None, "Last sibling node")
-        next = property(get_next, None, None, "Next sibling node")
+        next = property(get_next, add_next, None, "Next sibling node")
         prev = property(get_prev, None, None, "Previous sibling node")
         properties = property(get_properties, None, None, "List of properies")
         content = property(get_content, None, None, "Content of this node")
diff -ur libxml2-2.9.9-orig/tree.c libxml2-2.9.9/tree.c
--- libxml2-2.9.9-orig/tree.c	2020-02-14 10:32:21.971329619 +0000
+++ libxml2-2.9.9/tree.c	2020-02-14 10:59:44.700644151 +0000
@@ -2993,6 +2993,60 @@
 }
 
 /**
+ * xmlAddNext
+ * @cur:  the child node
+ * @elem:  the new node
+ *
+ * Add a new node @elem as the next sibling of @cur
+ * If the new node was already inserted in a document it is
+ * first unlinked from its existing context.
+ * As a result of text merging @elem may be freed.
+ * Doesn't treat text and attribute nodes differently.
+ *
+ * Returns the new node or NULL in case of error.
+ */
+xmlNodePtr
+xmlAddNext(xmlNodePtr cur, xmlNodePtr elem) {
+    if ((cur == NULL) || (cur->type == XML_NAMESPACE_DECL)) {
+#ifdef DEBUG_TREE
+        xmlGenericError(xmlGenericErrorContext,
+                "xmlAddNext : cur == NULL\n");
+#endif
+        return(NULL);
+    }
+    if ((elem == NULL) || (elem->type == XML_NAMESPACE_DECL)) {
+#ifdef DEBUG_TREE
+        xmlGenericError(xmlGenericErrorContext,
+                "xmlAddNext : elem == NULL\n");
+#endif
+        return(NULL);
+    }
+
+    if (cur == elem) {
+#ifdef DEBUG_TREE
+        xmlGenericError(xmlGenericErrorContext,
+                "xmlAddNext : cur == elem\n");
+#endif
+        return(NULL);
+    }
+
+    xmlUnlinkNode(elem);
+
+    if (elem->doc != cur->doc) {
+        xmlSetTreeDoc(elem, cur->doc);
+    }
+    elem->parent = cur->parent;
+    elem->prev = cur;
+    elem->next = cur->next;
+    cur->next = elem;
+    if (elem->next != NULL)
+        elem->next->prev = elem;
+    if ((elem->parent != NULL) && (elem->parent->last == cur))
+        elem->parent->last = elem;
+    return(elem);
+}
+
+/**
  * xmlAddNextSibling:
  * @cur:  the child node
  * @elem:  the new node
