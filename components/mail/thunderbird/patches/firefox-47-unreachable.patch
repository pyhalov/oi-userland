In house patch, will not send upstream.
ERR() function is already defined elsewhere. 

--- mozilla-esr38/gfx/angle/src/common/debug.h	2015-10-26 15:49:18.755193254 -0700
+++ mozilla-esr38/gfx/angle/src/common/debug.h	2015-10-26 15:48:39.108802848 -0700
@@ -57,9 +57,9 @@ namespace gl
 
 // A macro to output a function call and its arguments to the debugging log, in case of error.
 #if defined(ANGLE_TRACE_ENABLED)
-#define ERR(message, ...) gl::trace(false, gl::MESSAGE_ERR, "err: %s(%d): " message "\n", __FUNCTION__, __LINE__, ##__VA_ARGS__)
+#define FFERR(message, ...) gl::trace(false, gl::MESSAGE_ERR, "err: %s(%d): " message "\n", __FUNCTION__, __LINE__, ##__VA_ARGS__)
 #else
-#define ERR(message, ...) (void(0))
+#define FFERR(message, ...) (void(0))
 #endif
 
 // A macro to log a performance event around a scope.
@@ -105,7 +105,7 @@ namespace gl
 #if !defined(NDEBUG)
 #define ASSERT(expression) { \
     if(!(expression)) \
-        ERR("\t! Assert failed in %s(%d): "#expression"\n", __FUNCTION__, __LINE__); \
+        FFERR("\t! Assert failed in %s(%d): "#expression"\n", __FUNCTION__, __LINE__); \
         assert(expression); \
     } ANGLE_EMPTY_STATEMENT
 #define UNUSED_ASSERTION_VARIABLE(variable)
@@ -144,11 +144,11 @@ namespace gl
 // A macro for code which is not expected to be reached under valid assumptions
 #if !defined(NDEBUG)
 #define UNREACHABLE() { \
-    ERR("\t! Unreachable reached: %s(%d)\n", __FUNCTION__, __LINE__); \
+    FFERR("\t! Unreachable reached: %s(%d)\n", __FUNCTION__, __LINE__); \
     assert(false); \
     } ANGLE_EMPTY_STATEMENT
 #else
-    #define UNREACHABLE() ERR("\t! Unreachable reached: %s(%d)\n", __FUNCTION__, __LINE__)
+    #define UNREACHABLE() FFERR("\t! Unreachable reached: %s(%d)\n", __FUNCTION__, __LINE__)
 #endif
 
 #endif   // COMMON_DEBUG_H_
